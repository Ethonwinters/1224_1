test_folder = r'F:\ptdatav3\1500_nor\test'  # 输入文件所在目录
input_files = sorted([f for f in os.listdir(test_folder) if f.startswith('input') and f.endswith('.pt')])  # 查找所有 input{i}.pt 文件
target_files = sorted([f for f in os.listdir(test_folder) if f.startswith('target') and f.endswith('.pt')])  # 查找所有 target{i}.pt 文件

# # Step 3: 只处理前 600 个文件
# input_files = input_files[:200]  # 只选择前 600 个 input 文件
# target_files = target_files[:200]  # 只选择前 600 个 target 文件

# Step 4: 初始化保存结果的列表
A_values = []  # 用于存储 A 值
predicted_outputs = []  # 用于存储预测结果
true_outputs = []  # 用于存储真实结果

# Step 5: 逐个加载 input 和 target 文件，进行预测并计算 A
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
net.to(device)  # 确保模型在正确的设备上

for input_file, target_file in zip(input_files, target_files):
    # 加载输入和目标张量
    input_tensor = torch.load(os.path.join(test_folder, input_file)).to(device)
    output_tensor = torch.load(os.path.join(test_folder, target_file)).to(device)
    
    # 进行预测
    with torch.no_grad():
        predicted_output = net(input_tensor.unsqueeze(0)) * target_std + target_mean   # 预测结果
        output_tensor = output_tensor * target_std + target_mean  # 转换目标张量到原始尺度
    
    # 计算 A 值
    A = (output_tensor - predicted_output) / output_tensor  # A 计算公式

    # 将预测结果、真实结果和 A 值转回 CPU 并转为 NumPy 数组 (去除 batch 维度)
    predicted_outputs.append(predicted_output.squeeze().cpu().numpy())  # 去掉 batch 维度，得到 (20, 20)
    true_outputs.append(output_tensor.squeeze().cpu().numpy())  # 去掉 batch 维度，得到 (20, 20)
    A_values.append(A.squeeze().cpu().numpy())  # 计算 A 值，并去掉 batch 维度，得到 (20, 20)

# Step 6: 将结果转换为 NumPy 数组，形状应为 (600, 20, 20)
predicted_outputs = np.array(predicted_outputs)  # 形状为 (600, 20, 20)
true_outputs = np.array(true_outputs)  # 形状为 (600, 20, 20)
A_matrix = np.array(A_values)  # 形状为 (600, 20, 20)

# 打印输出的形状
print(f"Predicted outputs shape: {predicted_outputs.shape}")  # 打印预测输出的形状
print(f"True outputs shape: {true_outputs.shape}")  # 打印真实输出的形状
print(f"A matrix shape: {A_matrix.shape}")  # 打印 A 的形状

# Step 7: 输出最后一个预测结果和真实结果
print(f"Last predicted_output: {predicted_outputs[0]}")  
print(f"Last true output_tensor: {true_outputs[0]}")  
print(f"Last A: {A_matrix[0]}") 




# Step 1: Flatten the predicted and true outputs to shape (64, 400)
predicted_outputs_flat = predicted_outputs.reshape(64, -1)  # 将预测结果展平为 (64, 400)
true_outputs_flat = true_outputs.reshape(64, -1)  # 将真实结果展平为 (64, 400)

# Step 2: 计算 MAPE, RMSE 和 R²

# 计算 MAPE
def calculate_mape(true, predicted):
    # 防止除零错误，取真值不为零的部分
    return np.mean(np.abs((true - predicted) / true)) * 100

# 计算 RMSE
def calculate_rmse(true, predicted):
    return np.sqrt(np.mean((true - predicted) ** 2))

# 计算 R²
def calculate_r2(true, predicted):
    ss_tot = np.sum((true - np.mean(true)) ** 2)
    ss_res = np.sum((true - predicted) ** 2)
    return 1 - (ss_res / ss_tot)

# 计算每个样本的 MAPE、RMSE 和 R²
mape_values = []
rmse_values = []
r2_values = []

for i in range(predicted_outputs_flat.shape[0]):
    true = true_outputs_flat[i]
    predicted = predicted_outputs_flat[i]
    
    mape = calculate_mape(true, predicted)
    rmse = calculate_rmse(true, predicted)
    r2 = calculate_r2(true, predicted)
    
    mape_values.append(mape)
    rmse_values.append(rmse)
    r2_values.append(r2)

# 转换为 NumPy 数组
mape_values = np.array(mape_values)
rmse_values = np.array(rmse_values)
r2_values = np.array(r2_values)

# Step 3: 打印输出
print(f"MAPE values for each sample: {mape_values}")
print(f"RMSE values for each sample: {rmse_values}")
print(f"R2 values for each sample: {r2_values}")

# 计算并输出均值
print(f"Mean MAPE: {np.mean(mape_values)}")
print(f"Mean RMSE: {np.mean(rmse_values)}")
print(f"Mean R2: {np.mean(r2_values)}")
